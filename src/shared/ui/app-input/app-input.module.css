.inputContainer {
    position: relative;
    border-radius: 0.25rem;
    width: auto;
    margin-bottom: 0.5em;
    margin-top: 3px;

    @apply text-foreground;


    .input {
        font: inherit;
        width: 100%;
        height: 100%;
        padding: 0.5rem;
        text-align: inherit;
        position: relative;
        border-radius: inherit;
        z-index: 1;
        border: none;
        background-color: transparent;
        
        &[type='number'] {
            appearance: textfield;
        }

        &::-webkit-outer-spin-button,
        &::-webkit-inner-spin-button {
            appearance: none;
            margin: 0;
        }

        &:focus {
            outline: none;
        }
    }

    .wrapper {
        position: absolute;
        inset: -0.3rem 0 0;
        min-width: 0;
        padding: 0 0.5rem;
        pointer-events: none;
        border-radius: inherit;
        overflow: hidden;
        text-overflow: ellipsis;
        z-index: var(--input-label-z-index);
        
        @apply border border-foreground-secondary;

        .legend {
            height: 0.8rem;
            white-space: nowrap;
            display: flex;
            align-items: center;
            justify-content: flex-start;
            visibility: hidden;
            width: 0.01px;

            span {
                width: 100%;
            }
        }
    }

    .inputLabel {
        position: absolute;
        left: 0;
        padding: 0 0.5rem;
        top: 0;
        bottom: 0;
        display: flex;
        align-items: center;
        pointer-events: none;
        user-select: none;
        text-overflow: ellipsis;
        overflow: hidden;
        max-width: 100%;
        z-index: var(--input-label-z-index);
        background-color: transparent;
        
        @apply animate-show-placeholder;

        .labelText {
            @apply text-foreground-secondary;
        }
    }

    &:has(textarea.input) {
        .inputLabel {
            align-items: start;
        }
    }

    &:has(input:read-only){
        .wrapper {
            @apply border-none;
            
        }

        .input {
              cursor: default;  
        }
    }

    &.filled, &:has(.input:focus, .input:-webkit-autofill, .input:autofill, .input[type='datetime-local'], .input[type='date']) {
            .inputLabel {
                font-size: 0.7rem;
                top: -0.6em;
                align-items: flex-start;
                margin: 0;
                max-width: calc(100% - 1rem - 2px);
                right: 0;
                
                @apply animate-show-label;

                .labelText {
                    padding: 0 4px;

                    @apply text-input-label;
                }
            }

            .wrapper {
                font-size: 0.7rem;
                border-color: hsl(var(--gray-dark-color));
                
                .legend {
                    max-width: calc(100% - 1rem);
                    padding: 0 3px;
                    width: auto;
                }
            }

            &.error {
                .wrapper {
                    @apply text-warning;
                }
            }
        }
    
    &:has(.input:focus) {
        .wrapper {
            border-width: 2px;
        }

        &.error {
            .inputLabel {
                color: var(--destructive-color);
            }
        }
    }
    
    &.fullwidth {
        width: 100%;
    }

    &.error {
        .errorText {
            position: absolute;
            font-size: 0.7rem;
            bottom: -1.5em;
            left: 2px;
            font-weight: bold;
            white-space: nowrap;
        }
    }

    &.search {
        margin: 0;
    }
    
    &.nolabel {
        .wrapper {
            inset: 0 !important;

            .legend {
                display: none;
            }
        }
    }
}

.inputFileContainer {
    @apply flex flex-col gap-6 relative border-dashed border-2 border-foreground rounded-sm mb-6;

    .inputFile {
        @apply sr-only;
    }
  
    .inputLabel {
        @apply rounded-inherit absolute cursor-pointer inset-0 z-10 flex items-center justify-center font-bold text-foreground w-full min-h-40 transition-all;

        .labelText {
            @apply select-none pointer-events-none block px-4 py-2 animate-show-placeholder text-center transition-colors duration-300 text-sm sm:text-base;
        }

        &:focus {
            @apply border-solid border-foreground;

            .labelText {
                @apply text-foreground;
            }
        }
    }

    &.readOnly{
        @apply border-solid;

        .inputLabel {
            @apply cursor-default;
        }
    }

    .files {
        @apply grid overflow-auto h-full grid-cols-2 gap-4 rounded-md p-2 transition duration-300 relative;

       
        grid-auto-rows: 14rem;

        @apply rounded-sm;
 
        
        /* stylelint-disable-next-line media-query-no-invalid */
        @media screen(sm) {
            grid-template-columns: repeat(auto-fill, minmax(9rem, 1fr));
        }
    }

    .filePreviewCard {
        @apply grid grid-cols-1 z-10 grid-rows-5 max-w-80 flex-col p-2 relative gap-2 overflow-hidden;
    }

    .fileImage {
        @apply h-full w-full object-cover self-center select-none pointer-events-none row-span-3;
    }

    .fileName {
        @apply row-span-1 overflow-hidden truncate font-normal text-sm h-8;
    }

   

    .filesInfo {
        @apply flex gap-1 justify-between w-full flex-wrap px-2 pt-1 items-end text-xs sm:text-sm absolute -bottom-6 right-1 select-none;
    }

    .filesInfoText{
        @apply flex gap-2;
    }

    &.error {
        .errorText {
            @apply bottom-0 left-1 z-10;
        }
    }

    .fileSize {
        @apply text-xs right-2 whitespace-nowrap text-foreground-secondary;
    }
}

.asterisk {
    @apply text-warning;
}

.error{
    &, &.filled {
        .inputLabel {
            .labelText {
                @apply text-warning;
            }    
        }

        .files, .wrapper {
            @apply border-warning;
            
        }
    
        .errorText {
            @apply text-warning;
        }
    }
}