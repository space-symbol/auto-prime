generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Order {
  id          String   @id @default(cuid())
  orderDate   DateTime
  status      OrderStatuses
  totalAmount Float
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment     Payment?
  cartId      Int     
  cart        Cart     @relation(fields: [cartId], references: [id])

  @@map("orders")
}

model User {
  id            String    @id @default(cuid())
  name          String?   @default("")
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?   @default("")
  role          Roles     @default(USER)
  accounts      Account[]
  orders        Order[]
  sessions      Session[]
  carts         Cart[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Detail {
  id                 Int        @id @default(autoincrement())
  name               String     @unique
  description        String
  price              Decimal    @db.Decimal(10, 2)
  quantityAvailable  Int
  discountedPrice    Decimal? @db.Decimal(10, 2)
  images             String[]
  createdAt          DateTime   @default(now()) @db.Timestamptz(3)
  discounts          Discount[] 
  categories         Category[]
  cartItems          CartItem[]

  @@map("details")
}

model Discount {
  id           Int       @id @default(autoincrement())
  percentage   Int
  startDate    DateTime @default(now()) @db.Timestamptz(3)
  endDate      DateTime @db.Timestamptz(3)
  details       Detail[]
  categories     Category[] 
  
  @@map("discounts")
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String
  details Detail[]
  discountId Int?
  discount Discount? @relation(fields: [discountId], references: [id])

  @@map("categories")
}

model Payment {
  id            Int      @id @default(autoincrement())
  paymentDate   DateTime
  paymentMethod String
  amount        Float
  orderId       String   @unique
  order         Order    @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    String    
  user      User       @relation(fields: [userId], references: [id])
  isActive  Boolean    @default(true)
  totalPrice Decimal    @db.Decimal(10, 2) @default(0)
  createdAt DateTime   @default(now()) @db.Timestamptz(3)
  items     CartItem[]
  order     Order[]

  @@unique(name: "active_user_cart", [userId, isActive])
  @@map("carts")
}

model CartItem {
  id       Int    @id @default(autoincrement())
  cartId   Int    
  cart     Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  detailId Int    
  detail   Detail @relation(fields: [detailId], references: [id])
  quantity Int

  @@unique([cartId, detailId])
  @@map("cart_items")
}

enum Roles {
  USER
  ADMIN
}

enum OrderStatuses {
  PENDING
  COMPLETED
  CANCELLED
}
